% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stratEst_simulate.R
\name{stratEst.simulate}
\alias{stratEst.simulate}
\title{Simulation function for strategy estimation.}
\usage{
stratEst.simulate(
  strategies,
  shares,
  coefficients,
  covariates,
  num.ids = 100,
  num.games = 5,
  num.periods,
  fixed.assignment = FALSE,
  input.na = FALSE
)
}
\arguments{
\item{strategies}{Mandatory input object. Can be either a positive integer or a matrix. If an integer is used, the estimation function will generate the respective number of memory-one strategies with as many states as there are unique input values in \code{data}. A matrix can be used to supply a set of customized strategies. In the matrix, each row corresponds to one state of a strategy, starting with the start state of an automaton. The first column enumerates the states of each strategy in ascending order. A value of one in the first column indicates the begin of a new strategy with its start state. The columns after the first column contain the collection of multinomial response vectors. The number of columns for the multinomial response vectors must correspond to the number of unique non-zero outputs in data. Without a reference output - which is labeled with a zero in the output column of data - the columns specify the complete multinomial response distribution for each unique value in the output column. In this case, the response probabilities in each row must sum to one. With a reference output, the response probability for the response labeled with zero is omitted and the response probabilities in each row must sum to a value smaller or equal to one. The remaining columns of the strategies matrix define the deterministic state transitions. The number of columns must equal the number of unique non-zero inputs in the data. The numbers in the first column indicate the next state of the automaton if the input is one. The numbers in the second column indicate the next state if the input is two and so on.}

\item{shares}{A matrix of strategy shares. The number of columns must correspond to the number of samples in the data. The number of rows must correspond to the number of strategies defined in the strategies matrix. Elements which are NA are estimated from the data. If the object is not supplied, one share is estimated for every strategy defined in the strategies matrix for every sample.}

\item{coefficients}{Column vector which contains the latent class regression coefficients. The elements correspond to the vector of estimates.}

\item{covariates}{A character vector indicating the names of the variables in data that are the covariates of the latent class regression model. Rows with the same id must have the values of covariates. Missing value are not allowed. Whenever a character vector is supplied for the input object 'covariates', a latent class regression model is estimated.}

\item{num.ids}{Integer which specifies the number of individuals which are assigned to the stategies. Default is 100.}

\item{num.games}{Integer which specifies the number of games each individual plays. Default is 5 games.}

\item{num.periods}{A column vector with as many elments as there are games. The elements of the vector are integer vaules which specify the number of periods of each game. Default is 5 periods in each game.}

\item{fixed.assignment}{A logical indicating whether the assignment of individuals to strategies is fixed. If \code{FALSE} individuals are repeatedly assigned to strategies for each each game. If \code{TRUE}, individuals are only assigned once, and use the assigned strategy in each game. Default is \code{FALSE}.}

\item{input.na}{A logical indicating whether the input in the first period of a game is \code{NA}. If \code{FALSE}, and input is randomly selected for the first period. Default is \code{FALSE}.}
}
\description{
Simulates data which can be used to test the strategy estimation function \code{stratEst()}.
}
\examples{
## Fictitious data from a helping game
## Participant 62 plays reciprocal strategy.
## Participant 87 plays alternating strategy.
}
